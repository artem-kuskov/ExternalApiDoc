{
    "openapi": "3.0.1",
    "info": {
        "title": "Globus API",
        "description": "Globus API",
        "version": "1.0"
    },
    "servers": [{
            "url": "https://apim-staffing-dev-weu-001.azure-api.net"
        }
    ],
    "paths": {
        "/api/Auth/AuthUser": {
            "post": {
                "tags": ["Auth"],
                "summary": "Get Auth Token",
                "description": "Get Auth Token",
                "operationId": "post-api-auth-authuser",
                "requestBody": {
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthModel"
                            },
                            "example": {
                                "name": "string",
                                "password": "string"
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthModel"
                            },
                            "example": {
                                "name": "string",
                                "password": "string"
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthModel"
                            },
                            "example": {
                                "name": "string",
                                "password": "string"
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthModel"
                            },
                            "example": {
                                "name": "string",
                                "password": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                },
                                "example": {
                                    "_Token": "string",
                                    "tenantId": "string",
                                    "userId": "string",
                                    "expirationDate": "string"
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                },
                                "example": {
                                    "_Token": "string",
                                    "tenantId": "string",
                                    "userId": "string",
                                    "expirationDate": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Candidates": {
            "put": {
                "tags": [
                    "CandidatesExternal"
                ],
                "summary": "Upsert (update when the candidate exists or add new candidate otherwise) a batch of new candidates. TenantSpecificInfo properties are updated in the merge mode: if the update command doesn't contain existing field then its old value will be kept. To remove existing value of some TenantSpecificInfo field use null as a value. TenantSpecificInfo fields should be at first registered with api/External/v1/CandidateTenantSpecificInfoReferences",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CandidateExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CandidateExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CandidateExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CandidateExternalModelUpsertEntitiesCommand"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "tags": [
                    "CandidatesExternal"
                ],
                "summary": "Delete a batch of the candidates (Physically remove from database. Use PUT command to set IsDeleted flag for soft deleting)",
                "requestBody": {
                    "description": "A collection of CandidateId from third party CRM",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/External/v1/Candidates/GetByIds": {
            "post": {
                "tags": [
                    "CandidatesExternal"
                ],
                "summary": "Get a batch of the candidates",
                "requestBody": {
                    "description": "A collection of CandidateId from third party CRM",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CandidateExternalModel"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CandidateExternalModel"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CandidateExternalModel"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Candidates/All": {
            "get": {
                "tags": [
                    "CandidatesExternal"
                ],
                "summary": "Get a collection of candidates.",
                "parameters": [{
                        "name": "pageNum",
                        "in": "query",
                        "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }, {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CandidateExternalModel"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CandidateExternalModel"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CandidateExternalModel"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/CandidateTenantSpecificInfoReferences": {
            "put": {
                "tags": [
                    "CandidateTsiReferencesExternal"
                ],
                "summary": "Upsert (update when the attribute exists or add new attribute otherwise) a batch of candidate's additional properties references. PascalCase for the Name property is important",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CandidateTsiReferenceExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CandidateTsiReferenceExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CandidateTsiReferenceExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CandidateTsiReferenceExternalModelUpsertEntitiesCommand"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "tags": [
                    "CandidateTsiReferencesExternal"
                ],
                "summary": "Delete a batch of the candidate's additional property references",
                "requestBody": {
                    "description": "A collection of the names of candidate's additional properties (case sensitive)",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/External/v1/CandidateTenantSpecificInfoReferences/GetByNames": {
            "post": {
                "tags": [
                    "CandidateTsiReferencesExternal"
                ],
                "summary": "Get a batch of candidate's additional properties references",
                "requestBody": {
                    "description": "A collection of candidate's additional properties references Names (case sensitive)",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CandidateTsiReferenceExternalModel"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CandidateTsiReferenceExternalModel"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CandidateTsiReferenceExternalModel"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/CandidateTenantSpecificInfoReferences/All": {
            "get": {
                "tags": [
                    "CandidateTsiReferencesExternal"
                ],
                "summary": "Get a collection of candidate's additional properties references",
                "parameters": [{
                        "name": "pageNum",
                        "in": "query",
                        "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }, {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CandidateTsiReferenceExternalModel"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CandidateTsiReferenceExternalModel"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CandidateTsiReferenceExternalModel"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Customers": {
            "put": {
                "tags": [
                    "CommonCustomersExternal"
                ],
                "summary": "Upsert (update when the CommonCustomer exists or add new CommonCustomer otherwise) a batch of new CommonCustomers",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CommonCustomerExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CommonCustomerExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CommonCustomerExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CommonCustomerExternalModelUpsertEntitiesCommand"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "tags": [
                    "CommonCustomersExternal"
                ],
                "summary": "Delete a batch of the CommonCustomers",
                "requestBody": {
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/External/v1/Customers/GetByIds": {
            "post": {
                "tags": [
                    "CommonCustomersExternal"
                ],
                "summary": "Get a batch of the CommonCustomers by id",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonCustomer"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonCustomer"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonCustomer"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Customers/All": {
            "get": {
                "tags": [
                    "CommonCustomersExternal"
                ],
                "summary": "Get a collection of CommonCustomers.",
                "parameters": [{
                        "name": "pageNum",
                        "in": "query",
                        "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }, {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonCustomer"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonCustomer"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonCustomer"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Locations": {
            "put": {
                "tags": [
                    "CommonLocationsExternal"
                ],
                "summary": "Upsert (update when the CommonLocation exists or add new CommonLocation otherwise) a batch of new CommonLocations",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CommonLocationExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CommonLocationExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CommonLocationExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CommonLocationExternalModelUpsertEntitiesCommand"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "tags": [
                    "CommonLocationsExternal"
                ],
                "summary": "Delete a batch of the CommonLocations",
                "requestBody": {
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/External/v1/Locations/GetByIds": {
            "post": {
                "tags": [
                    "CommonLocationsExternal"
                ],
                "summary": "Get a batch of the CommonLocations by id",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonLocation"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonLocation"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonLocation"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Locations/All": {
            "get": {
                "tags": [
                    "CommonLocationsExternal"
                ],
                "summary": "Get a collection of CommonLocations.",
                "parameters": [{
                        "name": "pageNum",
                        "in": "query",
                        "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }, {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonLocation"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonLocation"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonLocation"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Roles": {
            "put": {
                "tags": [
                    "CommonRolesExternal"
                ],
                "summary": "Upsert (update when the CommonRole exists or add new CommonRole otherwise) a batch of new CommonRoles",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CommonRoleExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CommonRoleExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CommonRoleExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/CommonRoleExternalModelUpsertEntitiesCommand"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "tags": [
                    "CommonRolesExternal"
                ],
                "summary": "Delete a batch of the CommonRoles",
                "requestBody": {
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/External/v1/Roles/GetByIds": {
            "post": {
                "tags": [
                    "CommonRolesExternal"
                ],
                "summary": "Get a batch of the CommonRoles by id",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonRole"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonRole"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonRole"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Roles/All": {
            "get": {
                "tags": [
                    "CommonRolesExternal"
                ],
                "summary": "Get a collection of CommonRoles.",
                "parameters": [{
                        "name": "pageNum",
                        "in": "query",
                        "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }, {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonRole"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonRole"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CommonRole"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/ContactPersons": {
            "put": {
                "tags": [
                    "ContactPersonsExternal"
                ],
                "summary": "Upsert (update when the ContactPerson exists or add new ContactPerson otherwise) a batch of new ContactPersons",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ContactPersonExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ContactPersonExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ContactPersonExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ContactPersonExternalModelUpsertEntitiesCommand"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "tags": [
                    "ContactPersonsExternal"
                ],
                "summary": "Delete a batch of the ContactPersons",
                "requestBody": {
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/External/v1/ContactPersons/GetByIds": {
            "post": {
                "tags": [
                    "ContactPersonsExternal"
                ],
                "summary": "Get a batch of the ContactPersons by id",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ContactPerson"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ContactPerson"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ContactPerson"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/ContactPersons/All": {
            "get": {
                "tags": [
                    "ContactPersonsExternal"
                ],
                "summary": "Get a collection of ContactPersons",
                "parameters": [{
                        "name": "pageNum",
                        "in": "query",
                        "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }, {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ContactPerson"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ContactPerson"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ContactPerson"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Companies": {
            "put": {
                "tags": [
                    "ExternalCompaniesExternal"
                ],
                "summary": "Upsert (update when the ExternalCompany exists or add new ExternalCompany otherwise) a batch of new ExternalCompanies",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalCompanyExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalCompanyExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalCompanyExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalCompanyExternalModelUpsertEntitiesCommand"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "tags": [
                    "ExternalCompaniesExternal"
                ],
                "summary": "Delete a batch of the ExternalCompanies",
                "requestBody": {
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/External/v1/Companies/GetByIds": {
            "post": {
                "tags": [
                    "ExternalCompaniesExternal"
                ],
                "summary": "Get a batch of the ExternalCompanies by id",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalCompany"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalCompany"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalCompany"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Companies/All": {
            "get": {
                "tags": [
                    "ExternalCompaniesExternal"
                ],
                "summary": "Get a collection of ExternalCompanies",
                "parameters": [{
                        "name": "pageNum",
                        "in": "query",
                        "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }, {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalCompany"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalCompany"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalCompany"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Departments": {
            "put": {
                "tags": [
                    "ExternalDepartmentsExternal"
                ],
                "summary": "Upsert (update when the ExternalDepartment exists or add new ExternalDepartment otherwise) a batch of new ExternalDepartments",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalDepartmentExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalDepartmentExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalDepartmentExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalDepartmentExternalModelUpsertEntitiesCommand"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "tags": [
                    "ExternalDepartmentsExternal"
                ],
                "summary": "Delete a batch of the ExternalDepartments",
                "requestBody": {
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/External/v1/Departments/GetByIds": {
            "post": {
                "tags": [
                    "ExternalDepartmentsExternal"
                ],
                "summary": "Get a batch of the ExternalDepartments by id",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalDepartment"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalDepartment"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalDepartment"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Departments/All": {
            "get": {
                "tags": [
                    "ExternalDepartmentsExternal"
                ],
                "summary": "Get a collection of ExternalDepartments",
                "parameters": [{
                        "name": "pageNum",
                        "in": "query",
                        "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }, {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalDepartment"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalDepartment"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalDepartment"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Jobs": {
            "put": {
                "tags": [
                    "ExternalJobsExternal"
                ],
                "summary": "Upsert (update when the ExternalJob exists or add new ExternalJob otherwise) a batch of new ExternalJobs",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalJobExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalJobExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalJobExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalJobExternalModelUpsertEntitiesCommand"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "tags": [
                    "ExternalJobsExternal"
                ],
                "summary": "Delete a batch of the ExternalJobs",
                "requestBody": {
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/External/v1/Jobs/GetByIds": {
            "post": {
                "tags": [
                    "ExternalJobsExternal"
                ],
                "summary": "Get a batch of the ExternalJobs by id",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalJob"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalJob"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalJob"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Jobs/All": {
            "get": {
                "tags": [
                    "ExternalJobsExternal"
                ],
                "summary": "Get a collection of ExternalJobs",
                "parameters": [{
                        "name": "pageNum",
                        "in": "query",
                        "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }, {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalJob"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalJob"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalJob"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Projects": {
            "put": {
                "tags": [
                    "ExternalProjectsExternal"
                ],
                "summary": "Upsert (update when the ExternalProject exists or add new ExternalProject otherwise) a batch of new ExternalProjects",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalProjectExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalProjectExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalProjectExternalModelUpsertEntitiesCommand"
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalProjectExternalModelUpsertEntitiesCommand"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "tags": [
                    "ExternalProjectsExternal"
                ],
                "summary": "Delete a batch of the ExternalProjects",
                "requestBody": {
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/api/External/v1/Projects/GetByIds": {
            "post": {
                "tags": [
                    "ExternalProjectsExternal"
                ],
                "summary": "Get a batch of the ExternalProjects by id",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json-patch+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/*+json; x-api-version=1.0": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalProject"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalProject"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalProject"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/External/v1/Projects/All": {
            "get": {
                "tags": [
                    "ExternalProjectsExternal"
                ],
                "summary": "Get a collection of ExternalProjects",
                "parameters": [{
                        "name": "pageNum",
                        "in": "query",
                        "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }, {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/plain; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalProject"
                                    }
                                }
                            },
                            "application/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalProject"
                                    }
                                }
                            },
                            "text/json; x-api-version=1.0": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalProject"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AuthModel": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "password": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "Token": {
                "type": "object",
                "properties": {
                    "_Token": {
                        "type": "string",
                        "nullable": true
                    },
                    "tenantId": {
                        "type": "string",
                        "nullable": true
                    },
                    "userId": {
                        "type": "string",
                        "nullable": true
                    },
                    "expirationDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "additionalProperties": false
            },
			"CandidateExternalModel": {
                "type": "object",
                "properties": {
                    "candidateId": {
                        "type": "string",
                        "description": "Candidate's Id in third party CRM",
                        "nullable": true
                    },
                    "firstName": {
                        "type": "string",
                        "nullable": true
                    },
                    "lastName": {
                        "type": "string",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "description": "E-mail for sending offers and notifications",
                        "nullable": true
                    },
                    "mobilePhone": {
                        "type": "string",
                        "description": "Mobile for sending offers and notifications if it's not empty and IsMobilePhoneValid is true",
                        "nullable": true
                    },
                    "isMobilePhoneValid": {
                        "type": "boolean",
                        "description": "MobilePhone validation status.\r\ntrue - MobilePhone is valid and contains number in E.164 format,\r\nfalse - MobilePhone is not valid and contains original number,\r\nnull - MobilePhone is not validated yet or empty",
                        "nullable": true
                    },
                    "isDeleted": {
                        "type": "boolean",
                        "description": "Marked candidates are hidden, do not participate in orders, and can be physically removed from the database"
                    },
                    "isBanned": {
                        "type": "boolean",
                        "description": "Marked candidates are hidden, do not participate in orders but are kept in the database"
                    },
                    "tenantSpecificInfo": {
                        "type": "object",
                        "additionalProperties": {
                            "nullable": true
                        },
                        "description": "Additional Tenant's specific candidate's properties. The key contains property's name, the value contains property's value",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CandidateExternalModelUpsertEntitiesCommand": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CandidateExternalModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CandidateTsiReferenceExternalModel": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Field name. Case sensitive. PascalCase is necessary. Only Latin letters and digits are allowed",
                        "nullable": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "Sorting order for the property to show in UI in Candidate card. The properties with smaller Order value is shown on the top",
                        "format": "int32"
                    },
                    "showInUI": {
                        "type": "boolean",
                        "description": "Show the property in UI in Candidate card. When false, the value will be stored in DB and can be used in candidate filters but will be hidden for the user"
                    },
                    "translation": {
                        "type": "string",
                        "description": "The label text for the property in UI. Not mandatory when ShowUI is false",
                        "nullable": true
                    },
                    "type": {
                        "$ref": "#/components/schemas/CandidateTsiReferenceType"
                    }
                },
                "additionalProperties": false,
                "description": "Describes the additional candidate's property/attribute value type"
            },
            "CandidateTsiReferenceExternalModelUpsertEntitiesCommand": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CandidateTsiReferenceExternalModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CandidateTsiReferenceType": {
                "enum": [
                    0,
                    1,
                    2,
                    3,
                    10,
                    11,
                    20
                ],
                "type": "integer",
                "description": "List of candidate's additional property types\r\nDo not use Unknown type in API. Integer number or string name are both suitable to use in this field in API\r\n  Unknown = 0,\r\n  String = 1,\r\n  Int = 2,\r\n  Boolean = 3,\r\n  StringCollection = 10,\r\n  IntCollection = 11,\r\n  GeoLocation = 20 (Geo-location object { Lat: double, Lon: double })",
                "format": "int32"
            },
            "CommonCustomer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "domainEvents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IDomainEvent"
                        },
                        "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
                        "nullable": true,
                        "readOnly": true
                    },
                    "customerEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "departments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CommonCustomerExternalModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "customerEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "departments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CommonCustomerExternalModelUpsertEntitiesCommand": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CommonCustomerExternalModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CommonLocation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "domainEvents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IDomainEvent"
                        },
                        "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
                        "nullable": true,
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CommonLocationExternalModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CommonLocationExternalModelUpsertEntitiesCommand": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CommonLocationExternalModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CommonRole": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "domainEvents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IDomainEvent"
                        },
                        "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
                        "nullable": true,
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Standard role name",
                        "nullable": true
                    },
                    "customers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Legacy?",
                        "nullable": true
                    },
                    "candidateRoleNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Possible variations of this role name used in Candidates' Roles field to map into standard role name.\r\nCurrently, used by ETL only.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "A collection of standardized job roles"
            },
            "CommonRoleExternalModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Standard role name",
                        "nullable": true
                    },
                    "candidateRoleNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Possible variations of this role name used in Candidates' Roles field to map them into standard role name.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "A collection of standardized job roles"
            },
            "CommonRoleExternalModelUpsertEntitiesCommand": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CommonRoleExternalModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ContactPerson": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "domainEvents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IDomainEvent"
                        },
                        "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
                        "nullable": true,
                        "readOnly": true
                    },
                    "externalCompanyId": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "officePhone": {
                        "type": "string",
                        "nullable": true
                    },
                    "homePhone": {
                        "type": "string",
                        "nullable": true
                    },
                    "mobilePhone": {
                        "type": "string",
                        "nullable": true
                    },
                    "presentationPhoneNumber": {
                        "type": "string",
                        "description": "The first valid number among GlobusAI.Dedicare.Backend.Models.ContactPerson.MobilePhone and GlobusAI.Dedicare.Backend.Models.ContactPerson.OfficePhone, or empty if no\r\nvalid phone number is provided",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "source": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ContactPersonExternalModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalCompanyId": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "officePhone": {
                        "type": "string",
                        "nullable": true
                    },
                    "homePhone": {
                        "type": "string",
                        "nullable": true
                    },
                    "mobilePhone": {
                        "type": "string",
                        "nullable": true
                    },
                    "presentationPhoneNumber": {
                        "type": "string",
                        "description": "The first valid number among GlobusAI.Dedicare.Backend.Features.ExternalApi.ContactPersons.ContactPersonExternalModel.MobilePhone and GlobusAI.Dedicare.Backend.Features.ExternalApi.ContactPersons.ContactPersonExternalModel.OfficePhone, or empty if no\r\nvalid phone number is provided",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "source": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ContactPersonExternalModelUpsertEntitiesCommand": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContactPersonExternalModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ExternalCompany": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "domainEvents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IDomainEvent"
                        },
                        "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
                        "nullable": true,
                        "readOnly": true
                    },
                    "externalCompanyId": {
                        "type": "string",
                        "nullable": true
                    },
                    "parentCompanyId": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "updated": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "externalDepartmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "connectedCandidates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "connectedProjects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "address": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalSystemUrl": {
                        "type": "string",
                        "nullable": true
                    },
                    "geoLocation": {
                        "$ref": "#/components/schemas/GeoLocationModel"
                    }
                },
                "additionalProperties": false
            },
            "ExternalCompanyExternalModel": {
                "type": "object",
                "properties": {
                    "externalCompanyId": {
                        "type": "string",
                        "nullable": true
                    },
                    "parentCompanyId": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalDepartmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "connectedCandidates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "connectedProjects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    },
                    "address": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalSystemUrl": {
                        "type": "string",
                        "nullable": true
                    },
                    "geoLocation": {
                        "$ref": "#/components/schemas/GeoLocationModel"
                    }
                },
                "additionalProperties": false
            },
            "ExternalCompanyExternalModelUpsertEntitiesCommand": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExternalCompanyExternalModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ExternalDepartment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "domainEvents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IDomainEvent"
                        },
                        "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
                        "nullable": true,
                        "readOnly": true
                    },
                    "externalDepartmentId": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "address1": {
                        "type": "string",
                        "nullable": true
                    },
                    "address2": {
                        "type": "string",
                        "nullable": true
                    },
                    "postalCode": {
                        "type": "string",
                        "nullable": true
                    },
                    "city": {
                        "type": "string",
                        "nullable": true
                    },
                    "country": {
                        "type": "string",
                        "nullable": true
                    },
                    "bankAccount": {
                        "type": "string",
                        "nullable": true
                    },
                    "officePhone": {
                        "type": "string",
                        "nullable": true
                    },
                    "vatNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "logo": {
                        "type": "string",
                        "nullable": true
                    },
                    "parentDepartmentId": {
                        "type": "string",
                        "nullable": true
                    },
                    "number": {
                        "type": "string",
                        "nullable": true
                    },
                    "corporationId": {
                        "type": "string",
                        "nullable": true
                    },
                    "invoiceName": {
                        "type": "string",
                        "nullable": true
                    },
                    "iban": {
                        "type": "string",
                        "nullable": true
                    },
                    "bic": {
                        "type": "string",
                        "nullable": true
                    },
                    "invoiceIngress": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ExternalDepartmentExternalModel": {
                "type": "object",
                "properties": {
                    "externalDepartmentId": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "address1": {
                        "type": "string",
                        "nullable": true
                    },
                    "address2": {
                        "type": "string",
                        "nullable": true
                    },
                    "postalCode": {
                        "type": "string",
                        "nullable": true
                    },
                    "city": {
                        "type": "string",
                        "nullable": true
                    },
                    "country": {
                        "type": "string",
                        "nullable": true
                    },
                    "bankAccount": {
                        "type": "string",
                        "nullable": true
                    },
                    "officePhone": {
                        "type": "string",
                        "nullable": true
                    },
                    "vatNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "logo": {
                        "type": "string",
                        "nullable": true
                    },
                    "parentDepartmentId": {
                        "type": "string",
                        "nullable": true
                    },
                    "number": {
                        "type": "string",
                        "nullable": true
                    },
                    "corporationId": {
                        "type": "string",
                        "nullable": true
                    },
                    "invoiceName": {
                        "type": "string",
                        "nullable": true
                    },
                    "iban": {
                        "type": "string",
                        "nullable": true
                    },
                    "bic": {
                        "type": "string",
                        "nullable": true
                    },
                    "invoiceIngress": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ExternalDepartmentExternalModelUpsertEntitiesCommand": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExternalDepartmentExternalModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ExternalJob": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "domainEvents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IDomainEvent"
                        },
                        "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
                        "nullable": true,
                        "readOnly": true
                    },
                    "externalJobId": {
                        "type": "string",
                        "nullable": true
                    },
                    "employmentId": {
                        "type": "string",
                        "nullable": true
                    },
                    "candidateId": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalProjectId": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "startDate": {
                        "type": "string",
                        "nullable": true
                    },
                    "startDateParsed": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "endDate": {
                        "type": "string",
                        "nullable": true
                    },
                    "endDateParsed": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "salary": {
                        "type": "string",
                        "nullable": true
                    },
                    "invoice": {
                        "type": "string",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "salaryType": {
                        "type": "string",
                        "nullable": true
                    },
                    "separateInvoice": {
                        "type": "string",
                        "nullable": true
                    },
                    "holidayRate": {
                        "type": "string",
                        "nullable": true
                    },
                    "socialCostPercent": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalCompanyId": {
                        "type": "string",
                        "nullable": true
                    },
                    "dataSource": {
                        "type": "string",
                        "nullable": true
                    },
                    "shifts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExternalShift"
                        },
                        "nullable": true
                    },
                    "externalServiceTypeId": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ExternalJobExternalModel": {
                "type": "object",
                "properties": {
                    "externalJobId": {
                        "type": "string",
                        "nullable": true
                    },
                    "employmentId": {
                        "type": "string",
                        "nullable": true
                    },
                    "candidateId": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalProjectId": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "salary": {
                        "type": "string",
                        "nullable": true
                    },
                    "invoice": {
                        "type": "string",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "salaryType": {
                        "type": "string",
                        "nullable": true
                    },
                    "separateInvoice": {
                        "type": "string",
                        "nullable": true
                    },
                    "holidayRate": {
                        "type": "string",
                        "nullable": true
                    },
                    "socialCostPercent": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalCompanyId": {
                        "type": "string",
                        "nullable": true
                    },
                    "dataSource": {
                        "type": "string",
                        "nullable": true
                    },
                    "shifts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExternalShift"
                        },
                        "nullable": true
                    },
                    "externalServiceTypeId": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ExternalJobExternalModelUpsertEntitiesCommand": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExternalJobExternalModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ExternalProject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "domainEvents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IDomainEvent"
                        },
                        "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
                        "nullable": true,
                        "readOnly": true
                    },
                    "externalCompanyId": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalProjectId": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalDepartmentId": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalServiceTypeId": {
                        "type": "string",
                        "nullable": true
                    },
                    "number": {
                        "type": "string",
                        "nullable": true
                    },
                    "responsibleUserId": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "nullable": true
                    },
                    "completePercent": {
                        "type": "string",
                        "nullable": true
                    },
                    "updated": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "additionalProperties": false
            },
            "ExternalProjectExternalModel": {
                "type": "object",
                "properties": {
                    "externalCompanyId": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalProjectId": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalDepartmentId": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalServiceTypeId": {
                        "type": "string",
                        "nullable": true
                    },
                    "number": {
                        "type": "string",
                        "nullable": true
                    },
                    "responsibleUserId": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "nullable": true
                    },
                    "completePercent": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ExternalProjectExternalModelUpsertEntitiesCommand": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExternalProjectExternalModel"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ExternalShift": {
                "type": "object",
                "properties": {
                    "startUtc": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "endUtc": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "additionalProperties": false
            },
            "GeoLocationModel": {
                "type": "object",
                "properties": {
                    "lat": {
                        "type": "number",
                        "description": "Latitude",
                        "format": "double"
                    },
                    "lon": {
                        "type": "number",
                        "description": "Longitude",
                        "format": "double"
                    }
                },
                "additionalProperties": false,
                "description": "Geo-location storage model"
            },
            "IDomainEvent": {
                "type": "object",
                "properties": {
                    "dateTime": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "additionalProperties": false
            }
        },
        "securitySchemes": {
            "Bearer": {
                "type": "apiKey",
                "description": "Standard Authorization header",
                "name": "Authorization",
                "in": "header"
            },
            "TenantId": {
                "type": "apiKey",
                "description": "Used for setting up tenantId",
                "name": "AuthTenantId",
                "in": "header"
            }
        }
    },
    "security": [{
            "Bearer": []
        }, {
            "TenantId": []
        }
    ]
}
