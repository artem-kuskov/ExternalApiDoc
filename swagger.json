{
  "openapi": "3.0.1",
  "info": {
    "title": "Globus API",
    "description": "Globus API",
    "version": "v1"
  },
  "paths": {

    "/api/Auth/AuthUser": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Auth Token",
        "requestBody": {
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/AuthModel"
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/AuthModel"
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/AuthModel"
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/AuthModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          }
        }
      }
    },


    "/api/External/v1/Candidates": {
      "put": {
        "tags": [
          "CandidatesExternal"
        ],
        "summary": "Upsert (update when the candidate exists or add new candidate otherwise) a batch of new candidates",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CandidateExternalModelUpsertEntitiesCommand"
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CandidateExternalModelUpsertEntitiesCommand"
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CandidateExternalModelUpsertEntitiesCommand"
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CandidateExternalModelUpsertEntitiesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "CandidatesExternal"
        ],
        "summary": "Delete a batch of the candidates (Physically remove from database. Use PUT command to set IsDeleted flag for soft deleting)",
        "requestBody": {
          "description": "A collection of CandidateId from third party CRM",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/External/v1/Candidates/GetByIds": {
      "post": {
        "tags": [
          "CandidatesExternal"
        ],
        "summary": "Get a batch of the candidates",
        "requestBody": {
          "description": "A collection of CandidateId from third party CRM",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Candidate"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Candidate"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Candidate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Candidates/All": {
      "get": {
        "tags": [
          "CandidatesExternal"
        ],
        "summary": "Get a collection of candidates.",
        "parameters": [
          {
            "name": "pageNum",
            "in": "query",
            "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Candidate"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Candidate"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Candidate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Customers": {
      "put": {
        "tags": [
          "CommonCustomersExternal"
        ],
        "summary": "Upsert (update when the CommonCustomer exists or add new CommonCustomer otherwise) a batch of new CommonCustomers",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CommonCustomerExternalModelUpsertEntitiesCommand"
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CommonCustomerExternalModelUpsertEntitiesCommand"
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CommonCustomerExternalModelUpsertEntitiesCommand"
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CommonCustomerExternalModelUpsertEntitiesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "CommonCustomersExternal"
        ],
        "summary": "Delete a batch of the CommonCustomers",
        "requestBody": {
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/External/v1/Customers/GetByIds": {
      "post": {
        "tags": [
          "CommonCustomersExternal"
        ],
        "summary": "Get a batch of the CommonCustomers by id",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonCustomer"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonCustomer"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonCustomer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Customers/All": {
      "get": {
        "tags": [
          "CommonCustomersExternal"
        ],
        "summary": "Get a collection of CommonCustomers.",
        "parameters": [
          {
            "name": "pageNum",
            "in": "query",
            "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonCustomer"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonCustomer"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonCustomer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Locations": {
      "put": {
        "tags": [
          "CommonLocationsExternal"
        ],
        "summary": "Upsert (update when the CommonLocation exists or add new CommonLocation otherwise) a batch of new CommonLocations",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CommonLocationExternalModelUpsertEntitiesCommand"
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CommonLocationExternalModelUpsertEntitiesCommand"
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CommonLocationExternalModelUpsertEntitiesCommand"
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CommonLocationExternalModelUpsertEntitiesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "CommonLocationsExternal"
        ],
        "summary": "Delete a batch of the CommonLocations",
        "requestBody": {
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/External/v1/Locations/GetByIds": {
      "post": {
        "tags": [
          "CommonLocationsExternal"
        ],
        "summary": "Get a batch of the CommonLocations by id",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonLocation"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonLocation"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonLocation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Locations/All": {
      "get": {
        "tags": [
          "CommonLocationsExternal"
        ],
        "summary": "Get a collection of CommonLocations.",
        "parameters": [
          {
            "name": "pageNum",
            "in": "query",
            "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonLocation"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonLocation"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonLocation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Roles": {
      "put": {
        "tags": [
          "CommonRolesExternal"
        ],
        "summary": "Upsert (update when the CommonRole exists or add new CommonRole otherwise) a batch of new CommonRoles",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CommonRoleExternalModelUpsertEntitiesCommand"
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CommonRoleExternalModelUpsertEntitiesCommand"
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CommonRoleExternalModelUpsertEntitiesCommand"
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/CommonRoleExternalModelUpsertEntitiesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "CommonRolesExternal"
        ],
        "summary": "Delete a batch of the CommonRoles",
        "requestBody": {
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/External/v1/Roles/GetByIds": {
      "post": {
        "tags": [
          "CommonRolesExternal"
        ],
        "summary": "Get a batch of the CommonRoles by id",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonRole"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonRole"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonRole"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Roles/All": {
      "get": {
        "tags": [
          "CommonRolesExternal"
        ],
        "summary": "Get a collection of CommonRoles.",
        "parameters": [
          {
            "name": "pageNum",
            "in": "query",
            "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonRole"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonRole"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonRole"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/ContactPersons": {
      "put": {
        "tags": [
          "ContactPersonsExternal"
        ],
        "summary": "Upsert (update when the ContactPerson exists or add new ContactPerson otherwise) a batch of new ContactPersons",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ContactPersonExternalModelUpsertEntitiesCommand"
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ContactPersonExternalModelUpsertEntitiesCommand"
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ContactPersonExternalModelUpsertEntitiesCommand"
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ContactPersonExternalModelUpsertEntitiesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ContactPersonsExternal"
        ],
        "summary": "Delete a batch of the ContactPersons",
        "requestBody": {
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/External/v1/ContactPersons/GetByIds": {
      "post": {
        "tags": [
          "ContactPersonsExternal"
        ],
        "summary": "Get a batch of the ContactPersons by id",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactPerson"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactPerson"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactPerson"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/ContactPersons/All": {
      "get": {
        "tags": [
          "ContactPersonsExternal"
        ],
        "summary": "Get a collection of ContactPersons",
        "parameters": [
          {
            "name": "pageNum",
            "in": "query",
            "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactPerson"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactPerson"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactPerson"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Companies": {
      "put": {
        "tags": [
          "ExternalCompaniesExternal"
        ],
        "summary": "Upsert (update when the ExternalCompany exists or add new ExternalCompany otherwise) a batch of new ExternalCompanies",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalCompanyExternalModelUpsertEntitiesCommand"
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalCompanyExternalModelUpsertEntitiesCommand"
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalCompanyExternalModelUpsertEntitiesCommand"
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalCompanyExternalModelUpsertEntitiesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ExternalCompaniesExternal"
        ],
        "summary": "Delete a batch of the ExternalCompanies",
        "requestBody": {
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/External/v1/Companies/GetByIds": {
      "post": {
        "tags": [
          "ExternalCompaniesExternal"
        ],
        "summary": "Get a batch of the ExternalCompanies by id",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalCompany"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalCompany"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalCompany"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Companies/All": {
      "get": {
        "tags": [
          "ExternalCompaniesExternal"
        ],
        "summary": "Get a collection of ExternalCompanies",
        "parameters": [
          {
            "name": "pageNum",
            "in": "query",
            "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalCompany"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalCompany"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalCompany"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Departments": {
      "put": {
        "tags": [
          "ExternalDepartmentsExternal"
        ],
        "summary": "Upsert (update when the ExternalDepartment exists or add new ExternalDepartment otherwise) a batch of new ExternalDepartments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalDepartmentExternalModelUpsertEntitiesCommand"
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalDepartmentExternalModelUpsertEntitiesCommand"
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalDepartmentExternalModelUpsertEntitiesCommand"
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalDepartmentExternalModelUpsertEntitiesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ExternalDepartmentsExternal"
        ],
        "summary": "Delete a batch of the ExternalDepartments",
        "requestBody": {
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/External/v1/Departments/GetByIds": {
      "post": {
        "tags": [
          "ExternalDepartmentsExternal"
        ],
        "summary": "Get a batch of the ExternalDepartments by id",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalDepartment"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalDepartment"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalDepartment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Departments/All": {
      "get": {
        "tags": [
          "ExternalDepartmentsExternal"
        ],
        "summary": "Get a collection of ExternalDepartments",
        "parameters": [
          {
            "name": "pageNum",
            "in": "query",
            "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalDepartment"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalDepartment"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalDepartment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Jobs": {
      "put": {
        "tags": [
          "ExternalJobsExternal"
        ],
        "summary": "Upsert (update when the ExternalJob exists or add new ExternalJob otherwise) a batch of new ExternalJobs",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalJobExternalModelUpsertEntitiesCommand"
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalJobExternalModelUpsertEntitiesCommand"
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalJobExternalModelUpsertEntitiesCommand"
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalJobExternalModelUpsertEntitiesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ExternalJobsExternal"
        ],
        "summary": "Delete a batch of the ExternalJobs",
        "requestBody": {
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/External/v1/Jobs/GetByIds": {
      "post": {
        "tags": [
          "ExternalJobsExternal"
        ],
        "summary": "Get a batch of the ExternalJobs by id",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalJob"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalJob"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalJob"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Jobs/All": {
      "get": {
        "tags": [
          "ExternalJobsExternal"
        ],
        "summary": "Get a collection of ExternalJobs",
        "parameters": [
          {
            "name": "pageNum",
            "in": "query",
            "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalJob"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalJob"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalJob"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Projects": {
      "put": {
        "tags": [
          "ExternalProjectsExternal"
        ],
        "summary": "Upsert (update when the ExternalProject exists or add new ExternalProject otherwise) a batch of new ExternalProjects",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalProjectExternalModelUpsertEntitiesCommand"
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalProjectExternalModelUpsertEntitiesCommand"
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalProjectExternalModelUpsertEntitiesCommand"
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "$ref": "#/components/schemas/ExternalProjectExternalModelUpsertEntitiesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ExternalProjectsExternal"
        ],
        "summary": "Delete a batch of the ExternalProjects",
        "requestBody": {
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/External/v1/Projects/GetByIds": {
      "post": {
        "tags": [
          "ExternalProjectsExternal"
        ],
        "summary": "Get a batch of the ExternalProjects by id",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json; x-api-version=1.0": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalProject"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalProject"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalProject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/External/v1/Projects/All": {
      "get": {
        "tags": [
          "ExternalProjectsExternal"
        ],
        "summary": "Get a collection of ExternalProjects",
        "parameters": [
          {
            "name": "pageNum",
            "in": "query",
            "description": "Page number (1 for the first page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size (1 for one element on each page. If 0 or less than do not use paginating and return all data)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalProject"
                  }
                }
              },
              "application/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalProject"
                  }
                }
              },
              "text/json; x-api-version=1.0": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalProject"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {

      "AuthModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },

      "Token": {
        "type": "object",
        "properties": {
          "_Token": {
            "type": "string",
            "nullable": true
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },

      "Candidate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "domainEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDomainEvent"
            },
            "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
            "nullable": true,
            "readOnly": true
          },
          "tenantSpecificInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateInfoEntry"
            },
            "description": "Stores additional data like\r\n* Working In Healthcare sector Today\r\n* Valid certification\r\n* Your healthcare identifier\r\n* Valid driver's license",
            "nullable": true,
            "readOnly": true
          },
          "blockedCustomerIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "candidateId": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true
          },
          "isMobilePhoneValid": {
            "type": "boolean",
            "description": "MobilePhone validation status.\r\ntrue - MobilePhone is valid and contains number in E.164 format,\r\nfalse - MobilePhone is not valid and contains original number,\r\nnull - MobilePhone is not validated yet or empty",
            "nullable": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "employment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Employment"
            },
            "nullable": true,
            "readOnly": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isBanned": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "token": {
            "type": "string",
            "description": "Permanent token, including an encrypted candidate ID and tenant ID. Used for security purposes to avoid guessing other\r\ncandidates data on anonymous endpoints that require a candidate ID as a parameter.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateExternalModel": {
        "type": "object",
        "properties": {
          "candidateId": {
            "type": "string",
            "description": "Candidate's Id in third party CRM",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "E-mail for sending offers and notifications",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "description": "Mobile for sending offers and notifications if it's not empty and IsMobilePhoneValid is true",
            "nullable": true
          },
          "isMobilePhoneValid": {
            "type": "boolean",
            "description": "MobilePhone validation status.\r\ntrue - MobilePhone is valid and contains number in E.164 format,\r\nfalse - MobilePhone is not valid and contains original number,\r\nnull - MobilePhone is not validated yet or empty",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Marked candidates are hidden, do not participate in orders, and can be physically removed from the database"
          },
          "isBanned": {
            "type": "boolean",
            "description": "Marked candidates are hidden, do not participate in orders but are kept in the database"
          }
        },
        "additionalProperties": false
      },
      "CandidateExternalModelUpsertEntitiesCommand": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateExternalModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateInfoEntry": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "valueList": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "objectsValueList": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": { }
            },
            "nullable": true,
            "readOnly": true
          },
          "objectsValue": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true,
            "readOnly": true
          },
          "jArray": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JToken"
            },
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommonCustomer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "domainEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDomainEvent"
            },
            "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
            "nullable": true,
            "readOnly": true
          },
          "customerEmails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "departments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommonCustomerExternalModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "customerEmails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "departments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommonCustomerExternalModelUpsertEntitiesCommand": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommonCustomerExternalModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommonLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "domainEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDomainEvent"
            },
            "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommonLocationExternalModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommonLocationExternalModelUpsertEntitiesCommand": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommonLocationExternalModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommonRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "domainEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDomainEvent"
            },
            "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "customers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommonRoleExternalModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "customers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommonRoleExternalModelUpsertEntitiesCommand": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommonRoleExternalModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactPerson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "domainEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDomainEvent"
            },
            "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
            "nullable": true,
            "readOnly": true
          },
          "externalCompanyId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "officePhone": {
            "type": "string",
            "nullable": true
          },
          "homePhone": {
            "type": "string",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true
          },
          "presentationPhoneNumber": {
            "type": "string",
            "description": "The first valid number among GlobusAI.Dedicare.Backend.Models.ContactPerson.MobilePhone and GlobusAI.Dedicare.Backend.Models.ContactPerson.OfficePhone, or empty if no\r\nvalid phone number is provided",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactPersonExternalModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "externalCompanyId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "officePhone": {
            "type": "string",
            "nullable": true
          },
          "homePhone": {
            "type": "string",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true
          },
          "presentationPhoneNumber": {
            "type": "string",
            "description": "The first valid number among GlobusAI.Dedicare.Backend.Features.ExternalApi.ContactPersons.ContactPersonExternalModel.MobilePhone and GlobusAI.Dedicare.Backend.Features.ExternalApi.ContactPersons.ContactPersonExternalModel.OfficePhone, or empty if no\r\nvalid phone number is provided",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactPersonExternalModelUpsertEntitiesCommand": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactPersonExternalModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Employee": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "socialSecurityNo": {
            "type": "string",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "seniority": {
            "type": "string",
            "nullable": true
          },
          "salary": {
            "type": "string",
            "nullable": true
          },
          "employment": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "string",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "nullable": true
          },
          "workType": {
            "type": "string",
            "nullable": true
          },
          "paymentInterval": {
            "type": "string",
            "nullable": true
          },
          "workCanditionType": {
            "type": "string",
            "nullable": true
          },
          "shift": {
            "type": "string",
            "nullable": true
          },
          "hoursWeekly": {
            "type": "string",
            "nullable": true
          },
          "paymentMethod": {
            "type": "string",
            "nullable": true
          },
          "tableType": {
            "type": "string",
            "nullable": true
          },
          "tableNumber": {
            "type": "string",
            "nullable": true
          },
          "taxPercent": {
            "type": "string",
            "nullable": true
          },
          "occupationCode": {
            "type": "string",
            "nullable": true
          },
          "municipalityPercent": {
            "type": "string",
            "nullable": true
          },
          "employmentPercent": {
            "type": "string",
            "nullable": true
          },
          "emailPaycheck": {
            "type": "string",
            "nullable": true
          },
          "aaRegister": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "integer",
            "format": "int32"
          },
          "salaryInterval": {
            "type": "string",
            "nullable": true
          },
          "foreignSocialSecurityNo": {
            "type": "string",
            "nullable": true
          },
          "offshoreBankAccount": {
            "type": "string",
            "nullable": true
          },
          "hogiaEmploymentStatus": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Employment": {
        "type": "object",
        "properties": {
          "employmentId": {
            "type": "integer",
            "format": "int32"
          },
          "employmentIds": {
            "type": "string",
            "nullable": true
          },
          "primary": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "postitionPercent": {
            "type": "string",
            "nullable": true
          },
          "yearSalary": {
            "type": "number",
            "format": "double"
          },
          "hourSalary": {
            "type": "number",
            "format": "double"
          },
          "employeeNumber": {
            "type": "integer",
            "format": "int32"
          },
          "socialSecurityNo": {
            "type": "string",
            "nullable": true
          },
          "departmentId": {
            "type": "integer",
            "format": "int32"
          },
          "subcontractorCompanyId": {
            "type": "integer",
            "format": "int32"
          },
          "bankAccount": {
            "type": "string",
            "nullable": true
          },
          "responsibleUserId": {
            "type": "integer",
            "format": "int32"
          },
          "bic": {
            "type": "string",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "nullable": true
          },
          "dNumber": {
            "type": "string",
            "nullable": true
          },
          "primaryEmployer": {
            "type": "string",
            "nullable": true
          },
          "vacationDayCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ExternalCompany": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "domainEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDomainEvent"
            },
            "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
            "nullable": true,
            "readOnly": true
          },
          "externalCompanyId": {
            "type": "string",
            "nullable": true
          },
          "parentCompanyId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "externalDepartmentIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "connectedCandidates": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "connectedProjects": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "externalSystemUrl": {
            "type": "string",
            "nullable": true
          },
          "geoLocation": {
            "$ref": "#/components/schemas/GeoLocationModel"
          }
        },
        "additionalProperties": false
      },
      "ExternalCompanyExternalModel": {
        "type": "object",
        "properties": {
          "externalCompanyId": {
            "type": "string",
            "nullable": true
          },
          "parentCompanyId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "externalDepartmentIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "connectedCandidates": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "connectedProjects": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "externalSystemUrl": {
            "type": "string",
            "nullable": true
          },
          "geoLocation": {
            "$ref": "#/components/schemas/GeoLocationModel"
          }
        },
        "additionalProperties": false
      },
      "ExternalCompanyExternalModelUpsertEntitiesCommand": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalCompanyExternalModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalDepartment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "domainEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDomainEvent"
            },
            "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
            "nullable": true,
            "readOnly": true
          },
          "externalDepartmentId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "nullable": true
          },
          "officePhone": {
            "type": "string",
            "nullable": true
          },
          "vatNumber": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "parentDepartmentId": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "corporationId": {
            "type": "string",
            "nullable": true
          },
          "invoiceName": {
            "type": "string",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "nullable": true
          },
          "bic": {
            "type": "string",
            "nullable": true
          },
          "invoiceIngress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalDepartmentExternalModel": {
        "type": "object",
        "properties": {
          "externalDepartmentId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "nullable": true
          },
          "officePhone": {
            "type": "string",
            "nullable": true
          },
          "vatNumber": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "parentDepartmentId": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "corporationId": {
            "type": "string",
            "nullable": true
          },
          "invoiceName": {
            "type": "string",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "nullable": true
          },
          "bic": {
            "type": "string",
            "nullable": true
          },
          "invoiceIngress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalDepartmentExternalModelUpsertEntitiesCommand": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalDepartmentExternalModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "domainEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDomainEvent"
            },
            "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
            "nullable": true,
            "readOnly": true
          },
          "externalJobId": {
            "type": "string",
            "nullable": true
          },
          "employmentId": {
            "type": "string",
            "nullable": true
          },
          "candidateId": {
            "type": "string",
            "nullable": true
          },
          "externalProjectId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "startDateParsed": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "endDateParsed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "salary": {
            "type": "string",
            "nullable": true
          },
          "invoice": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "salaryType": {
            "type": "string",
            "nullable": true
          },
          "separateInvoice": {
            "type": "string",
            "nullable": true
          },
          "holidayRate": {
            "type": "string",
            "nullable": true
          },
          "socialCostPercent": {
            "type": "string",
            "nullable": true
          },
          "externalCompanyId": {
            "type": "string",
            "nullable": true
          },
          "dataSource": {
            "type": "string",
            "nullable": true
          },
          "shifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalShift"
            },
            "nullable": true
          },
          "externalServiceTypeId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalJobExternalModel": {
        "type": "object",
        "properties": {
          "externalJobId": {
            "type": "string",
            "nullable": true
          },
          "employmentId": {
            "type": "string",
            "nullable": true
          },
          "candidateId": {
            "type": "string",
            "nullable": true
          },
          "externalProjectId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "startDateParsed": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "endDateParsed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "salary": {
            "type": "string",
            "nullable": true
          },
          "invoice": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "salaryType": {
            "type": "string",
            "nullable": true
          },
          "separateInvoice": {
            "type": "string",
            "nullable": true
          },
          "holidayRate": {
            "type": "string",
            "nullable": true
          },
          "socialCostPercent": {
            "type": "string",
            "nullable": true
          },
          "externalCompanyId": {
            "type": "string",
            "nullable": true
          },
          "dataSource": {
            "type": "string",
            "nullable": true
          },
          "shifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalShift"
            },
            "nullable": true
          },
          "externalServiceTypeId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalJobExternalModelUpsertEntitiesCommand": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalJobExternalModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalProject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "domainEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDomainEvent"
            },
            "description": "Domain events occurred. Only needed at runtime and won't be serialized neither to the DB nor to JSON.",
            "nullable": true,
            "readOnly": true
          },
          "externalCompanyId": {
            "type": "string",
            "nullable": true
          },
          "externalProjectId": {
            "type": "string",
            "nullable": true
          },
          "externalDepartmentId": {
            "type": "string",
            "nullable": true
          },
          "externalServiceTypeId": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "responsibleUserId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "completePercent": {
            "type": "string",
            "nullable": true
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ExternalProjectExternalModel": {
        "type": "object",
        "properties": {
          "externalCompanyId": {
            "type": "string",
            "nullable": true
          },
          "externalProjectId": {
            "type": "string",
            "nullable": true
          },
          "externalDepartmentId": {
            "type": "string",
            "nullable": true
          },
          "externalServiceTypeId": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "responsibleUserId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "completePercent": {
            "type": "string",
            "nullable": true
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ExternalProjectExternalModelUpsertEntitiesCommand": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalProjectExternalModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalShift": {
        "type": "object",
        "properties": {
          "startUtc": {
            "type": "string",
            "format": "date-time"
          },
          "endUtc": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GeoLocationModel": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "description": "Latitude",
            "format": "double"
          },
          "lon": {
            "type": "number",
            "description": "Longitude",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Geo-location storage model"
      },
      "IDomainEvent": {
        "type": "object",
        "properties": {
          "dateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "JToken": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/JToken"
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Standard Authorization header",
        "name": "Authorization",
        "in": "header"
      },
      "TenantId": {
        "type": "apiKey",
        "description": "Used for setting up tenantId",
        "name": "AuthTenantId",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    },
    {
      "TenantId": [ ]
    }
  ]
}